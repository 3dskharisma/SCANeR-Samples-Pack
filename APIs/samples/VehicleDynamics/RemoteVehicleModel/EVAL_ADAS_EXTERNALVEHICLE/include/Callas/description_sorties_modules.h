
BEGIN_FONCTION("Pause-Acquisition", "Pause-Acquisition", Run, 2, false, FUNCTION_RUN, "")
	SORTIE(Run, bool, IsRunning, stk::TDimNone, "Toggle between run and pause")
	SORTIE(Run, bool, IsAcquisition, stk::TDimNone, "Toggle saving the results file")
END_FONCTION()

BEGIN_FONCTION("Steering command", "Commande du volant",CommandSteering, 17, false, FUNCTION_COMMAND_STEERING, "Steering wheel control by position or torque")
	SORTIE(CommandSteering, bool, IsTorqCommand, stk::TDimNone, "True if the steering is controlled by torque, otherwise, by position")
	SORTIE(CommandSteering, double, SteeringTorq, stk::TDimTorque, "Torque to be applied to the steering wheel")
	SORTIE(CommandSteering, double, SteeringWheelAngle, stk::TDimAngle, "Angle of the steering wheel")
	SORTIE(CommandSteering, double, SteeringWheelSpeed, stk::TDimSpeedAngle, "Angular speed of the steering wheel")
	SORTIE(CommandSteering, double, SteeringWheelAcc, stk::TDimAccelAngle, "Angular acceleration of the steering wheel")
	SORTIE(CommandSteering, double, DistOnTraj, stk::TDimLength, "Trajectory distance of the vehicle")
	SORTIE(CommandSteering, double, IdealeCurvature, stk::TDimCurvature, "Curvature of the trajectory at the closest point to the vehicle")
	SORTIE(CommandSteering, double, TrajError, stk::TDimLength, "Distance between the vehicle and the closest point on the trajectory")
	SORTIE(CommandSteering, SPoint3D, IdealTrjPos, stk::TDimLength, "Position of the closest point of the ideal trajectory to the vehicle")
	SORTIE(CommandSteering, SPoint3D, IdealTrjDirection, stk::TDimAngle, "Direction of the trajectory at the closest point to the vehicle")
	SORTIE(CommandSteering, SPoint3D, PosPrevision, stk::TDimLength, "Predicted position of the vehicle, after the prediction time")
END_FONCTION()

BEGIN_FONCTION("Pedals command", "Commandes des pedales", CommandPedals, 4, false, FUNCTION_COMMAND_PEDALS, "Override driver pedal controls")
	SORTIE(CommandPedals, double, Accel, stk::TDimNone, "Throttle position")
	SORTIE(CommandPedals, double, Brake, stk::TDimForce, "Force on the brake pedal")
	SORTIE(CommandPedals, double, HandBrake, stk::TDimForce, "Hand brake force")
	SORTIE(CommandPedals, double, Clutch, stk::TDimNone, "Clutch pedal position")
END_FONCTION()

BEGIN_FONCTION("Turret command", "Commande de la tourelle", CommandTurret, 11, false, FUNCTION_COMMAND_TURRET, "Override driver turrets control")
	SORTIE(CommandTurret, int, TypeArchitecture, stk::TDimNone, "Active architecture")
	SORTIE(CommandTurret, int, NbShots, stk::TDimNone, "Number of shots to be fired")
	SORTIE(CommandTurret, double, ShotRythm, stk::TDimNone, "Firing rate")
	SORTIE_ENUM(CommandTurret, t_TurretPointing, TurretPointing, stk::TDimNone, "Type of pointing algorithm")
	SORTIE(CommandTurret, double, AimAngTurret, stk::TDimAngle, "Aim angle of the turret (only for angular pointing)")
	SORTIE(CommandTurret, double, AimAngGun, stk::TDimAngle, "Aim angle of the weapon (only for angular pointing)")
	SORTIE(CommandTurret, SPoint3D, TargetPosition, stk::TDimLength, "Position of the aiming target (only for positional pointing)")
	SORTIE(CommandTurret, double, TurretSpeed, stk::TDimSpeedAngle, "Target speed of the turret (only for speed pointing)")
	SORTIE(CommandTurret, double, GunSpeed, stk::TDimSpeedAngle, "Target speed of the weapon (only for speed pointing)")
END_FONCTION()

BEGIN_FONCTION("Turret motorisation", "Motorisation de la tourelle", Turret, 2, true, FUNCTION_TURRET, "Replace turret motor model")
	SORTIE(Turret, double, TurretTorq, stk::TDimTorque, "Torque to be applied to the turret around the Z axis")
	SORTIE(Turret, double, GunTorq, stk::TDimTorque, "Torque to be applied to the weapon around the Y axis")
END_FONCTION()

BEGIN_FONCTION("Engine", "Moteur", Engine, 4, true, FUNCTION_ENGINE, "Replace engine model")
	SORTIE(Engine, double, EngineSpeed, stk::TDimSpeedAngle, "Imposed speed of the engine")
	SORTIE(Engine, double, Torq, stk::TDimTorque, "Torque generated by the engine")
	SORTIE(Engine, double, PosAccelMesured, stk::TDimNone, "Effective accelerator position (throttle valve position)")
	SORTIE(Engine, double, InstantConsumption, stk::TDimFuelConsumption, "Instantaneous fuel consumption")
END_FONCTION()

BEGIN_FONCTION("Suspension elasticity", "Elasticite de suspension", WheelsElasticity, 10*NB_AXLES_MAX*2, true, FUNCTION_WHEELS_ELASTICITY, "Replace suspension elasticity model")
	SORTIE_ARRAY2(WheelsElasticity, bool, IsSpringExternalized, stk::TDimNone, NB_AXLES_MAX, 2, "True if the spring force is externalized, for each axle")
	SORTIE_ARRAY2(WheelsElasticity, double, ForceSpring, stk::TDimForce, NB_AXLES_MAX, 2, "Spring force")
	SORTIE_ARRAY2(WheelsElasticity, bool, IsDamperExternalized, stk::TDimNone, NB_AXLES_MAX, 2, "True if the damper force is externalized, for each axle")
	SORTIE_ARRAY2(WheelsElasticity, double, ForceDamper, stk::TDimForce, NB_AXLES_MAX, 2, "Damper force")
	SORTIE_ARRAY2(WheelsElasticity, bool, IsBumpCompExternalized, stk::TDimNone, NB_AXLES_MAX, 2, "True if the bump force is externalized, for each axle")
	SORTIE_ARRAY2(WheelsElasticity, double, ForceBumpComp, stk::TDimForce, NB_AXLES_MAX, 2, "Compression bump force")
	SORTIE_ARRAY2(WheelsElasticity, bool, IsBumpReboundExternalized, stk::TDimNone, NB_AXLES_MAX, 2, "True if the rebound force is externalized, for each axle")
	SORTIE_ARRAY2(WheelsElasticity, double, ForceBumpRebound, stk::TDimForce, NB_AXLES_MAX, 2, "Rebound bump force")
	SORTIE_ARRAY2(WheelsElasticity, bool, IsAntiRollBarExternalized, stk::TDimNone, NB_AXLES_MAX, 2, "True if the anti-roll bar force is externalized, for each axle")
	SORTIE_ARRAY2(WheelsElasticity, double, ForceAntiRollBar, stk::TDimForce, NB_AXLES_MAX, 2, "Anti-roll bar force")
END_FONCTION()


BEGIN_FONCTION("Force", "Torser d'effort", Force, 9, true, FUNCTION_FORCE, "Apply a torser to the vehicle (supports additive mode)")
	SORTIE(Force, STorser, T, stk::TDimForce, "Force and momentum to be applied to one point of the vehicle's body")
END_FONCTION()

BEGIN_FONCTION("Solid", "Solide", Solid, 10, true, FUNCTION_SOLID, "Add a solid to the vehicle")
	SORTIE(Solid, SPoint3D, Pos, stk::TDimLength, "Position of the additional solid, on the vehicle frame")
	SORTIE(Solid, double, Ixx, stk::TDimNone, "xx inertia of the additional solid")
	SORTIE(Solid, double, Iyy, stk::TDimNone, "yy inertia of the additional solid")
	SORTIE(Solid, double, Izz, stk::TDimNone, "zz inertia of the additional solid")
	SORTIE(Solid, double, Ixy, stk::TDimNone, "xy inertia of the additional solid")
	SORTIE(Solid, double, Ixz, stk::TDimNone, "xz inertia of the additional solid")
	SORTIE(Solid, double, Iyz, stk::TDimNone, "yz inertia of the additional solid")
	SORTIE(Solid, double, Mass, stk::TDimNone, "Mass of the additional solid")
END_FONCTION()


BEGIN_FONCTION("Ground grip", "Adhérence du sol", Grip, 2*NB_AXLES_MAX*2, true, FUNCTION_GRIP, "Change the grouns grip")
	SORTIE_ARRAY2(Grip, double, GripLongi, stk::TDimNone, NB_AXLES_MAX, 2, "Lengthwise grip (per wheel)")
	SORTIE_ARRAY2(Grip, double, GripLateral, stk::TDimNone, NB_AXLES_MAX, 2, "Sideways grip (per wheel)")
END_FONCTION()


BEGIN_FONCTION("Steering system", "Organes de direction", Steering, 5+3*NB_AXLES_MAX, true, FUNCTION_STEERING, "Replace the steering model")
	SORTIE_ARRAY(Steering, double, RackTravel, stk::TDimLength, NB_AXLES_MAX, "Steering rack travel")
	SORTIE_ARRAY(Steering, double, RackTravelSpeed, stk::TDimSpeed, NB_AXLES_MAX, "Steering rack travel speed")
	SORTIE_ARRAY(Steering, double, RackTravelAcceleration, stk::TDimAccel, NB_AXLES_MAX, "Steering rack travel acceleration")
	SORTIE(Steering, double, PinionAngle, stk::TDimAngle, "Pinion angle")
	SORTIE(Steering, double, PinionSpeed, stk::TDimSpeedAngle, "Pinion angular speed")
	SORTIE(Steering, double, PinionAcceleration, stk::TDimAccelAngle, "Pinion angular acceleration")
	SORTIE(Steering, double, TorsionAngle, stk::TDimAngle, "Torsion angle of the column")
	SORTIE(Steering, double, AssistanceTorque, stk::TDimTorque, "Assistance torque")
END_FONCTION()

BEGIN_FONCTION("Wheels additional forces and moments", "Torser superposés aux roues", WheelTorser, 9*NB_AXLES_MAX*2, true, FUNCTION_WHEEL_TORSER, "Add torsers to the wheels (supports additive mode)")
	SORTIE_ARRAY2(WheelTorser, STorser, TorserSup, stk::TDimForce, NB_AXLES_MAX, 2, "Additional force and momentum to be applied to the wheel (for each wheel)")
END_FONCTION()

BEGIN_FONCTION("Wind", "Vent", Wind, 2, false, FUNCTION_WIND, "Apply wind to the vehicle")
	SORTIE(Wind,double, Direction, stk::TDimAngle, "Direction of the wind relative to the ground")
	SORTIE(Wind, double, Speed, stk::TDimSpeed, "Speed of the wind relative to the ground")
END_FONCTION()

BEGIN_FONCTION("Deprecated1", "Deprecated1", Deprecated1, 5, false, FUNCTION_DEPRECATED1, "")
	SORTIE(Deprecated1,int, reserved, stk::TDimNone, "reserved")
END_FONCTION()


BEGIN_FONCTION("Brake pressure", "Pression des freins", BrakePressure, NB_AXLES_MAX*2, false, FUNCTION_BRAKE_PRESSURE, "Override brakepressure in the calipers (supports additive mode)")
	SORTIE_ARRAY2(BrakePressure, double, Pressure, stk::TDimPressure, NB_AXLES_MAX, 2, "Brake pressure (per wheel)")
END_FONCTION()


BEGIN_FONCTION("Gearbox command", "Commande de la boite de vitesse", GearboxCommand, 2, false, FUNCTION_COMMAND_GEAR, "Override gearbox command")
	SORTIE(GearboxCommand,int, WantedGear, stk::TDimNone, "Target gearbox ratio")
	SORTIE_ENUM(GearboxCommand, t_AutoMode, AutoMode, stk::TDimNone, "Position of the auto gear box stick (see definition of t_AutoMode for available positions)")
END_FONCTION()

BEGIN_FONCTION("Skid steering command", "Commande de skid-steering", CommandSkid, 1, false, FUNCTION_COMMAND_SKID, "Override skid steering command")
	SORTIE(CommandSkid, double, CommandSkid, stk::TDimNone, "Skid steering command")
END_FONCTION()

BEGIN_FONCTION("Suspension component travels", "Debattements des composants de suspension", ComponentTravel, NB_AXLES_MAX + 8*NB_AXLES_MAX*2, true, FUNCTION_COMPONENT_TRAVEL, "Replace suspension component travel model")
	SORTIE_ARRAY(ComponentTravel, bool, IsExternalized, stk::TDimNone, NB_AXLES_MAX, "True if the function is externalized, for each axle")
	SORTIE_ARRAY2(ComponentTravel, double, SpringTravel, stk::TDimLength, NB_AXLES_MAX, 2, "Spring travel")
	SORTIE_ARRAY2(ComponentTravel, double, RatioKinSpring, stk::TDimNone, NB_AXLES_MAX, 2, "Kinematic ratio of the spring")
	SORTIE_ARRAY2(ComponentTravel, double, DamperTravel, stk::TDimLength, NB_AXLES_MAX, 2, "Damper travel")
	SORTIE_ARRAY2(ComponentTravel, double, RatioKinDamper, stk::TDimNone, NB_AXLES_MAX, 2, "Kinematic ratio of the damper")
	SORTIE_ARRAY2(ComponentTravel, double, BumpCompTravel, stk::TDimLength, NB_AXLES_MAX, 2, "Compression bump travel")
	SORTIE_ARRAY2(ComponentTravel, double, RatioKinBumpComp, stk::TDimNone, NB_AXLES_MAX, 2, "Kinematic ratio of the compression bump")
	SORTIE_ARRAY2(ComponentTravel, double, BumpReboundTravel, stk::TDimLength, NB_AXLES_MAX, 2, "Rebound bump travel")
	SORTIE_ARRAY2(ComponentTravel, double, RatioKinBumpRebound, stk::TDimNone, NB_AXLES_MAX, 2, "Kinematic ratio of the rebound bump")
END_FONCTION()


BEGIN_FONCTION("Suspension kinematics", "Cinematique de suspension", WheelKinematics, (NB_AXLES_MAX + 10*NB_AXLES_MAX*2), true, FUNCTION_WHEELS_KINEMATICS, "Replace wheel kinematics model")
	SORTIE_ARRAY(WheelKinematics, bool, IsExternalized, stk::TDimNone, NB_AXLES_MAX, "True if suspension kinematics is externalized, per axle")
	SORTIE_ARRAY2(WheelKinematics, SPoint2D, Position, stk::TDimLength, NB_AXLES_MAX, 2, "Position of the hub carrier in the XY plane")
	SORTIE_ARRAY2(WheelKinematics, SPoint3D, Angle, stk::TDimAngle, NB_AXLES_MAX, 2, "Orientation of the hub carrier")
	SORTIE_ARRAY2(WheelKinematics, SPoint2D, PositionDerivative, stk::TDimSpeed, NB_AXLES_MAX, 2, "Derivative of the position of the hub carrier in the XY plane (dx/dz, dy/dz)")
	SORTIE_ARRAY2(WheelKinematics, SPoint3D, AngleDerivative, stk::TDimSpeedAngle, NB_AXLES_MAX, 2, "Derivative of the orientation of the hub carrier")
END_FONCTION()


BEGIN_FONCTION("Tires grip", "Adhérence des pneumatiques", TireGrip, 6*NB_AXLES_MAX*2*2, true, FUNCTION_TIRE_GRIP, "Replace tire grip model")
	SORTIE_ARRAY3(TireGrip, bool, IsExternalized, stk::TDimNone, NB_AXLES_MAX, 2, 2, "Activate external tire grip modeling (per tire)")
	SORTIE_ARRAY3(TireGrip, SPoint2D, Force, stk::TDimForce, NB_AXLES_MAX, 2, 2, "Longitudinal and laterale forces of the tire, in the tire frame")
	SORTIE_ARRAY3(TireGrip, SPoint3D, Moment, stk::TDimTorque, NB_AXLES_MAX, 2, 2, "Torques of the tire")
END_FONCTION()


BEGIN_FONCTION("Tires vertical elasticity", "Elasticite verticale des pneus", TireElasticity, (2*NB_AXLES_MAX*2*2), true, FUNCTION_TIRE_ELASTICITY, "Replace tires vertical elasticity model")
	SORTIE_ARRAY3(TireElasticity, bool, IsExternalized, stk::TDimNone, NB_AXLES_MAX, 2, 2, "Activate external tire elasticity (per tire)")
	SORTIE_ARRAY3(TireElasticity, double, VerticalForce, stk::TDimForce, NB_AXLES_MAX, 2, 2, "Vertical force of the tire")
END_FONCTION()

BEGIN_FONCTION("Ground properties", "Proprietes de sol", GroundProperties, 2, false, FUNCTION_GROUND_PROPERTIES, "Override ground properties")
	SORTIE_ARRAY(GroundProperties, int, Properties, stk::TDimNone, 2, "Ground properties index as defined in the ground file (for left and right side of the vehicle)")
END_FONCTION()

BEGIN_FONCTION("Wheels steering", "Braquage des roues", WheelSteering, (NB_AXLES_MAX + NB_AXLES_MAX*2), true, FUNCTION_WHEEL_STEERING, "Override wheel steering angles (supports additive mode)")
	SORTIE_ARRAY2(WheelSteering, bool, IsExternalized, stk::TDimNone, NB_AXLES_MAX, 2, "Activate external wheel steering (per wheel)")
	SORTIE_ARRAY2(WheelSteering, double, SteeringAngle, stk::TDimAngle, NB_AXLES_MAX, 2, "Wheel steering angle (per wheel)")
END_FONCTION()

BEGIN_FONCTION("Rollers elasticity", "Elasticite des galets de chenille", RollerElasticity, 8*NB_ROLLERS_MAX*2, true, FUNCTION_ROLLER_ELASTICITY, "Replace roller elasticity model")
	SORTIE_ARRAY2(RollerElasticity, bool, IsSpringExternalized, stk::TDimNone, NB_ROLLERS_MAX, 2, "Activate external roller spring force (per roller)")
	SORTIE_ARRAY2(RollerElasticity, double, ForceSpring, stk::TDimForce, NB_ROLLERS_MAX, 2, "Roller spring force")
	SORTIE_ARRAY2(RollerElasticity, bool, IsDamperExternalized, stk::TDimNone, NB_ROLLERS_MAX, 2, "Activate external roller damping force (per roller)")
	SORTIE_ARRAY2(RollerElasticity, double, ForceDamper, stk::TDimForce, NB_ROLLERS_MAX, 2, "Roller damping force")
	SORTIE_ARRAY2(RollerElasticity, bool, IsBumpCompExternalized, stk::TDimNone, NB_ROLLERS_MAX, 2, "Activate external roller compression bump force (per roller)")
	SORTIE_ARRAY2(RollerElasticity, double, ForceBumpComp, stk::TDimForce, NB_ROLLERS_MAX, 2, "Roller compression bump force")
	SORTIE_ARRAY2(RollerElasticity, bool, IsBumpReboundExternalized, stk::TDimNone, NB_ROLLERS_MAX, 2, "Activate external roller rebound bump force (per roller)")
	SORTIE_ARRAY2(RollerElasticity, double, ForceBumpRebound, stk::TDimForce, NB_ROLLERS_MAX, 2, "Roller rebound bump force")
END_FONCTION()

BEGIN_FONCTION("Rollers component travels", "Galets - débattements des composants", RollerComponentTravel, 9*NB_ROLLERS_MAX*2, true, FUNCTION_ROLLER_COMPONENT_TRAVEL, "Replace roller component travel model")
	SORTIE_ARRAY2(RollerComponentTravel, bool, IsExternalized, stk::TDimNone, NB_ROLLERS_MAX, 2, "Activate external component travels (per roller)")
	SORTIE_ARRAY2(RollerComponentTravel, double, SpringTravel, stk::TDimLength, NB_ROLLERS_MAX, 2, "Roller spring travel")
	SORTIE_ARRAY2(RollerComponentTravel, double, SpringKinRatio, stk::TDimNone, NB_ROLLERS_MAX, 2, "Roller spring kinematic ratio")
	SORTIE_ARRAY2(RollerComponentTravel, double, DamperTravel, stk::TDimLength, NB_ROLLERS_MAX, 2, "Roller damper travel")
	SORTIE_ARRAY2(RollerComponentTravel, double, DamperKinRatio, stk::TDimNone, NB_ROLLERS_MAX, 2, "Roller spring kinematic ratio")
	SORTIE_ARRAY2(RollerComponentTravel, double, BumpCompTravel, stk::TDimLength, NB_ROLLERS_MAX, 2, "Roller bump bushing travel")
	SORTIE_ARRAY2(RollerComponentTravel, double, BumpCompKinRatio, stk::TDimNone, NB_ROLLERS_MAX, 2, "Roller bump bushing kinematic ratio")
	SORTIE_ARRAY2(RollerComponentTravel, double, BumpReboundTravel, stk::TDimLength, NB_ROLLERS_MAX, 2, "Roller rebound bushing travel")
	SORTIE_ARRAY2(RollerComponentTravel, double, BumpReboundKinRatio, stk::TDimNone, NB_ROLLERS_MAX, 2, "Roller rebound bushing kinematic ratio")
END_FONCTION()

BEGIN_FONCTION("Rollers kinematics", "Cinematique des galets de chenille", RollerKinematics, 11*NB_ROLLERS_MAX*2, true, FUNCTION_ROLLER_KINEMATICS, "Replace rollers kinematics model")
	SORTIE_ARRAY2(RollerKinematics, bool, IsExternalized, stk::TDimNone, NB_ROLLERS_MAX, 2, "Activate external roller kinematics (per roller)")
	SORTIE_ARRAY2(RollerKinematics, SPoint2D, Positions, stk::TDimLength, NB_ROLLERS_MAX, 2, "Position of the rollers in the XY plane")
	SORTIE_ARRAY2(RollerKinematics, SPoint3D, Angles, stk::TDimAngle, NB_ROLLERS_MAX, 2, "Orientation of the rollers")
	SORTIE_ARRAY2(RollerKinematics, SPoint2D, PositionsDerivative, stk::TDimSpeed, NB_ROLLERS_MAX, 2, "Derivative of the roller position in the XY plane (dx/dz, dy/dz)")
	SORTIE_ARRAY2(RollerKinematics, SPoint3D, AnglesDerivative, stk::TDimSpeedAngle, NB_ROLLERS_MAX, 2, "Derivative of the roller orientation")
END_FONCTION()

BEGIN_FONCTION("Links grip", "Adherence des maillons de chenille", LinksGrip, 9*NB_LINKS_MAX*2, true, FUNCTION_LINKS_GRIP, "Replace link grip model")
	SORTIE_ARRAY2(LinksGrip, SPoint2D, Force, stk::TDimForce, NB_LINKS_MAX, 2, "Grip force and momentum of the track link (per link)")
END_FONCTION()

BEGIN_FONCTION("Defects", "Defauts", Defects, SIZEOF_SORTIESFONCTIONDEFAUTS, true, FUNCTION_DEFECTS, "Apply defects to the vehicle")
	SORTIE(Defects, bool, IsDefEngine, stk::TDimNone, "Activate engine defect")
	SORTIE(Defects, double, EngineTorq, stk::TDimNone, "Engine torque modulation")
	SORTIE(Defects, bool, IsDefConverter, stk::TDimNone, "Activate converter defect")
	SORTIE(Defects, double, InvariantConverter, stk::TDimNone, "Converter invariant modulation")
	SORTIE(Defects, bool, IsDefSteeringAssistance, stk::TDimNone, "Activate steering assistance defect")
	SORTIE(Defects, double, SteeringTorqAssistance, stk::TDimNone, "Steering assistance modulation")
	SORTIE(Defects, bool, IsDefTires, stk::TDimNone, "Activate tire defects")
	SORTIE_ARRAY3(Defects, double, TireStiffness, stk::TDimNone, NB_AXLES_MAX, 2, 2, "Tire stiffness modulation")
	SORTIE_ARRAY3(Defects, double, TirePressure, stk::TDimNone, NB_AXLES_MAX, 2, 2, "Tire pressure modulation")
	SORTIE_ARRAY3(Defects, double, TireGripLongi, stk::TDimNone, NB_AXLES_MAX, 2, 2, "Lengthwise tire grip modulation")
	SORTIE_ARRAY3(Defects, double, TireGripLat, stk::TDimNone, NB_AXLES_MAX, 2, 2, "sideways tire grip modulation")
	SORTIE(Defects, bool, IsDefSuspWheels, stk::TDimNone, "Activate wheel suspension defects")
	SORTIE_ARRAY2(Defects, double, WheelDamperComp, stk::TDimNone, NB_AXLES_MAX, 2, "Wheel compression damper modulation")
	SORTIE_ARRAY2(Defects, double, WheelDamperRebound, stk::TDimNone, NB_AXLES_MAX, 2, "Wheel rebound damper modulation")
	SORTIE_ARRAY2(Defects, double, WheelBumpComp, stk::TDimNone, NB_AXLES_MAX, 2, "Wheel compression bushing modulation")
	SORTIE_ARRAY2(Defects, double, WheelBumpRebound, stk::TDimNone, NB_AXLES_MAX, 2, "Wheel rebound bushing modulation")
	SORTIE_ARRAY2(Defects, double, WheelElasticityForce, stk::TDimNone, NB_AXLES_MAX, 2, "Wheel spring modulation")
	SORTIE(Defects, bool, IsDefBrake, stk::TDimNone, "Activate brake defects")
	SORTIE_ARRAY2(Defects, double, BrakeTorq, stk::TDimTorque, NB_AXLES_MAX, 2, "Brake torque modulation")
	SORTIE_ARRAY2(Defects, double, BrakePressure, stk::TDimNone, NB_AXLES_MAX, 2, "Brake pressure modulation")
	SORTIE(Defects, bool, IsDefSuspRolls, stk::TDimNone, "Activate track rollers suspension defects")
	SORTIE_ARRAY2(Defects, double, RollDamperComp, stk::TDimNone, NB_ROLLERS_MAX, 2, "Roller compression damper modulation")
	SORTIE_ARRAY2(Defects, double, RollDamperRebound, stk::TDimNone, NB_ROLLERS_MAX, 2, "Roller rebound damper modulation")
	SORTIE_ARRAY2(Defects, double, RollBumpComp, stk::TDimNone, NB_ROLLERS_MAX, 2, "Roller bump compression modulation")
	SORTIE_ARRAY2(Defects, double, RollBumpRebound, stk::TDimNone, NB_ROLLERS_MAX, 2, "Roller bump rebound modulation")
	SORTIE_ARRAY2(Defects, double, RollElasticityForce, stk::TDimNone, NB_ROLLERS_MAX, 2, "Roller spring force modulation")
END_FONCTION()

BEGIN_FONCTION("Engine thermics", "Thermique du moteur", ThermalEngine, 2, true, FUNCTION_THERMAL_ENGINE, "Replace engine termics model")
	SORTIE(ThermalEngine, double, TempWater, stk::TDimTemperature, "Engine water temperature")
	SORTIE(ThermalEngine, double, TempOil, stk::TDimTemperature, "Engine oil temperature")
END_FONCTION()


BEGIN_FONCTION("Suspension thermics", "Thermique des suspensions", ThermalSuspensionWheels, 1*NB_AXLES_MAX*2, true, FUNCTION_THERMAL_SUSPENSION_WHEELS, "Replace suspension thermics model")
	SORTIE_ARRAY2(ThermalSuspensionWheels, double, TempDamper, stk::TDimTemperature, NB_AXLES_MAX, 2, "Damper temperature (per damper)")
END_FONCTION()


BEGIN_FONCTION("Brakes thermics", "Thermique des freins", ThermalBrakes, 1*NB_AXLES_MAX*2, true, FUNCTION_THERMAL_BRAKES, "Replace brakes thermics model")
	SORTIE_ARRAY2(ThermalBrakes, double, TempDiscs, stk::TDimTemperature, NB_AXLES_MAX, 2, "Brake disks temperature (per disk)")
END_FONCTION()


BEGIN_FONCTION("Tires thermics", "Thermique des pneumatiques", ThermalTires, 1*NB_AXLES_MAX*2*2, true, FUNCTION_THERMAL_TIRES, "Replace tire thermics model")
	SORTIE_ARRAY3(ThermalTires, double, TempTires, stk::TDimTemperature, NB_AXLES_MAX, 2, 2, "Tire temperature (per tire)")
END_FONCTION()


BEGIN_FONCTION("Transmission thermics", "Thermique de transmission", ThermalTransmission, 2, true, FUNCTION_THERMAL_TRANSMISSION, "Replace transmission thermics model")
	SORTIE(ThermalTransmission, double, TempGearBox, stk::TDimTemperature, "Gear box temperature")
	SORTIE(ThermalTransmission, double, TempClutch, stk::TDimTemperature, "Clutch temperature")
END_FONCTION()


BEGIN_FONCTION("Torque converter", "Convertisseur de couple", Converter, 4, true, FUNCTION_CONVERTER, "Replace torque converter model")
	SORTIE(Converter, double, TorqIn, stk::TDimTorque, "Input torque of the converter")
	SORTIE(Converter, double, TorqOut, stk::TDimTorque, "Output torque of the converter")
	SORTIE(Converter, double, TurbineInertia, stk::TDimInertia, "Inertia of the turbine")
	SORTIE(Converter, double, PumpInertia, stk::TDimInertia, "Inertia of the pump")
END_FONCTION()


BEGIN_FONCTION("Gearbox", "Boite de vitesse", GearBox, 5, true, FUNCTION_GEAR_BOX, "Replace gerbox model")
	SORTIE(GearBox, double, TorqIn, stk::TDimTorque, "Input torque of the gear box")
	SORTIE(GearBox, double, TorqOut, stk::TDimTorque, "Output torque of the gear box")
	SORTIE(GearBox, double, Demul, stk::TDimNone, "Gear reduction")
	SORTIE(GearBox, double, Yield, stk::TDimNone, "Efficiency of the gear box")
	SORTIE(GearBox, double, Inertia, stk::TDimInertia, "Inertia of the gear box")
END_FONCTION()


BEGIN_FONCTION("Aerodynamics of the body", "Aerodynamique de la caisse", BodyAerodynamics, 15, true, FUNCTION_BODY_AERODYNAMICS, "Replace body aerodynamics model")
	SORTIE(BodyAerodynamics, STorser, TorserBody, stk::TDimForce, "Aerodynamic force and momentum to be applied on the vehicle body")
	SORTIE(BodyAerodynamics, double, Cx, stk::TDimNone, "Drag coefficient Cd")
	SORTIE(BodyAerodynamics, double, Cy1, stk::TDimNone, "Front side coefficient Cs1")
	SORTIE(BodyAerodynamics, double, Cy2, stk::TDimNone, "Rear side coefficient Cs2")
	SORTIE(BodyAerodynamics, double, Cz1, stk::TDimNone, "Front lift coefficient Cl1")
	SORTIE(BodyAerodynamics, double, Cz2, stk::TDimNone, "Rear lift coefficient Cl2")
	SORTIE(BodyAerodynamics, double, Cl, stk::TDimNone, "Yaw moment coefficient Cr")
END_FONCTION()


BEGIN_FONCTION("Aerodynamics fo the wheels", "Aerodynamique des roues", WheelAerodynamics, 9*NB_AXLES_MAX*2, true, FONCTION_AERO_ROUES, "Replace wheel aerodynamics model")
	SORTIE_ARRAY2(WheelAerodynamics, STorser, WheelTorser, stk::TDimForce, NB_AXLES_MAX, 2, "Aerodynamic force and momentum to be applied to the wheel (per wheel)")
END_FONCTION()


BEGIN_FONCTION("Recoil force", "Effort au lien", RecoilForce, 2, true, FUNCTION_RECOIL_FORCE, "Replace recoil force model")
	SORTIE(RecoilForce, double, Effort, stk::TDimForce, "Recoil force to be applied to the weapon")
	SORTIE(RecoilForce, double, RecoilDist, stk::TDimLength, "Recoil distance of the weapon")
END_FONCTION()


BEGIN_FONCTION("Plow", "Charrue", Plow, 9, true, FUNCTION_PLOW, "Replace demining plow model")
	SORTIE(Plow, STorser, PlowTorser, stk::TDimForce, "Force and momentum from the plow, to be applied to the vehicle")
END_FONCTION()

BEGIN_FONCTION("Engine and transmission additional torque", "Couples supplémentaires GMP", GMPTorque, 3, true, FUNCTION_GMP_TORQUE, "Add addition torque in the powertrain (supports additive mode)")
	SORTIE(GMPTorque, double, TorqSupEngine, stk::TDimTorque, "Additional torque to be added to the engine")
	SORTIE(GMPTorque, double, TorqSupClutch, stk::TDimTorque, "Additional torque to be added at the clutch output")
	SORTIE(GMPTorque, double, TorqSupGearBox, stk::TDimTorque, "Additional torque to be added at the gear box output")
END_FONCTION()

BEGIN_FONCTION("Rollers additional forces and moments", "Torser supplémentaire - galets de chenille", TorserRolls, 9*NB_ROLLERS_MAX*2, true, FUNCTION_TORSER_ROLLS, "Add torsers to the rollers (supports additive mode)")
	SORTIE_ARRAY2(TorserRolls, STorser, TorserSup, stk::TDimForce, NB_ROLLERS_MAX, 2, "Additional force and momentum to be applied to the roller (per roller)")
END_FONCTION()


BEGIN_FONCTION("Turrets additional forces and moments", "Torser supplémentaire tourelles",TorserTurrets, 9*NB_TURRETS_MAX, true, FUNCTION_TORSER_TURRETS, "Add torsers to the turrets (supports additive mode)")
	SORTIE_ARRAY(TorserTurrets, STorser, TorserSup, stk::TDimForce, NB_TURRETS_MAX, "Additional force and momentum to be applied to the turret (per turret)")
END_FONCTION()


BEGIN_FONCTION("Guns additional forces and moments", "Torser supplémentaire armes", TorserWeapons, 9*NB_WEAPONS_MAX, true, FUNCTION_TORSER_WEAPONS, "Add torsers to the guns (supports additive mode)")
	SORTIE_ARRAY(TorserWeapons, STorser, TorserSup, stk::TDimForce, NB_WEAPONS_MAX, "Force and momentum to be applied to the weapon (per weapon)")
END_FONCTION()

BEGIN_FONCTION("Tire sensor", "Palpeur pneumatiques", TireSensor, (7*NB_AXLES_MAX*2*2), true, FUNCTION_TIRE_SENSOR, "Replace tire/ground contact point detection")
	SORTIE_ARRAY3(TireSensor, bool, IsExternalized, stk::TDimNone, NB_AXLES_MAX, 2, 2, "Activate external tire sensor (per tire)")
	SORTIE_ARRAY3(TireSensor, SMark, Contact, stk::TDimLength, NB_AXLES_MAX, 2, 2, "Position of the contact point between the tire and the ground")
END_FONCTION()

BEGIN_FONCTION("Additional gearbox command", "Commandes complémentaires de boite de vitesse", GearboxCommandSup, 3, true, FUNCTION_COMMAND_GEAR_SUP, "Extends gearbox commands with additional information")
	SORTIE(GearboxCommandSup, int, TransferChoice, stk::TDimNone, "Selection of the transfer mode (long/short)")
	SORTIE_ENUM(GearboxCommandSup, t_LockDiffMode, LockDiffMode, stk::TDimNone, "Lock differentials")
	SORTIE(GearboxCommandSup, bool, ForceLockup, stk::TDimNone, "Force lockup torque converter")
END_FONCTION()

BEGIN_FONCTION("Deprecated2", "Deprecated2", Deprecated2, 0, true, FUNCTION_DEPRECATED2, "")
	SORTIE(Deprecated2, int, reserved, stk::TDimNone, "reserved")
END_FONCTION()

BEGIN_FONCTION("Ignition key", "Cle de contact", IgnitionKey, 1, true, FUNCTION_IGNITION_KEY, "Override ignition key command")
	SORTIE_ENUM(IgnitionKey, t_IgnitionKeyPosition, KeyPosition, stk::TDimNone, "Position of the ignition key (see t_IgnitionKeyPosition for possible values)")
END_FONCTION()

BEGIN_FONCTION("Toggle electronic assistance", "Activation des assistances électroniques", ToggleElectronicAssistance, 3, true, FUNCTION_TOGGLE_ELECTRONIC_ASSISTANCE, "Override toggle electronic assistance command")
	SORTIE(ToggleElectronicAssistance, bool, EnableABS, stk::TDimNone, "Enable anti-lock brake")
	SORTIE(ToggleElectronicAssistance, bool, EnableTractionControl, stk::TDimNone, "Enable traction control")
	SORTIE(ToggleElectronicAssistance, bool, EnableESP, stk::TDimNone, "Enable ESP")
END_FONCTION()

BEGIN_FONCTION("Suspension notch", "Cran de suspension", SuspensionNotch, 9*NB_AXLES_MAX, true, FUNCTION_SUSPENSION_NOTCH, "Change dynamically suspension settings")
	SORTIE_ARRAY2(SuspensionNotch, double, SpringNotch, stk::TDimNone, NB_AXLES_MAX, 2, "Selected spring notch")
	SORTIE_ARRAY2(SuspensionNotch, double, BumpDamperNotch, stk::TDimNone, NB_AXLES_MAX, 2, "Selected bump damper notch")
	SORTIE_ARRAY2(SuspensionNotch, double, ReboundDamperNotch, stk::TDimNone, NB_AXLES_MAX, 2, "Selected rebound damper notch")
	SORTIE_ARRAY(SuspensionNotch, double, CentralSpringNotch, stk::TDimNone, NB_AXLES_MAX, "Selected central spring notch")
	SORTIE_ARRAY(SuspensionNotch, double, CentralBumpDamperNotch, stk::TDimNone, NB_AXLES_MAX, "Selected central bump damper notch")
	SORTIE_ARRAY(SuspensionNotch, double, CentralReboundDamperNotch, stk::TDimNone, NB_AXLES_MAX, "Selected central rebound damper notch")
END_FONCTION()

BEGIN_FONCTION("Visual objects", "Objets visuels", VisualAppearance, 14*NB_APPEARANCE_ELTS, true, FUNCTION_VISUAL_APPEARANCE, "Add objects to the vehicle that can be viewed in the AnalysingTool")
	SORTIE_ARRAY(VisualAppearance, AppearanceElt, Elts, stk::TDimNone, NB_APPEARANCE_ELTS, "Description of the visual element")
END_FONCTION()

BEGIN_FONCTION("Water current", "Courrant d'eau", WaterCurrent, 3, false, FUNCTION_WATER_CURRENT, "Add water current forces to the vehicle")
	SORTIE(WaterCurrent, double, Direction, stk::TDimAngle, "Direction of the water current")
	SORTIE(WaterCurrent, double, Speed, stk::TDimSpeed, "Speed of the water current")
	SORTIE(WaterCurrent, double, Altitude, stk::TDimLength, "Altitude of the water level")
END_FONCTION()

BEGIN_FONCTION("Plow command", "Commande charrue", PlowCommand, 1, false, FUNCTION_PLOW_COMMAND, "Override demining plow command")
	SORTIE_ENUM(PlowCommand, t_PlowMode, PlowMode, stk::TDimNone, "Plow command")
END_FONCTION()

BEGIN_FONCTION("Suspension height command", "Commande de la hauteur de suspension", SuspensionHeight, 2*NB_AXLES_MAX*2, false, FUNCTION_SUSPENSION_HEIGHT, "Command suspension height")
	SORTIE_ARRAY2(SuspensionHeight, bool, EnableRegulation, stk::TDimNone, NB_AXLES_MAX, 2, "True if the suspension regulation is activated")
	SORTIE_ARRAY2(SuspensionHeight, double, SuspensionOffset, stk::TDimLength, NB_AXLES_MAX, 2, "Suspension height offset")
END_FONCTION()

BEGIN_FONCTION("Retarders command", "Commande des ralentisseurs", RetarderCommand, 2, false, FUNCTION_RETARDER_COMMAND, "Override additionnal brake commands")
	SORTIE_ENUM(RetarderCommand, t_EngineRetarder, EngineRetarderCommand, stk::TDimNone, "Engine retarder command")
	SORTIE(RetarderCommand, double, BrakeRetarderNotch, stk::TDimNone, "Brake retarder notch command")
END_FONCTION()

BEGIN_FONCTION("Additional Steering Torq", "Couple de direction Additionel", AdditionalSteeringTorq, 2, true, FUNCTION_ADDITIONAL_STEERING_TORQ, "Add torque to the steering (supports additive mode)")
	SORTIE_ENUM(AdditionalSteeringTorq, t_AdditionalTorq, AdditionalTorqType, stk::TDimNone, "Additional torq type")
	SORTIE(AdditionalSteeringTorq, double, AdditionalTorq, stk::TDimTorque, "Additional torq")
END_FONCTION()

BEGIN_FONCTION("Additional Wheel solid", "Solide roue additionnel", WheelSolid, 4*NB_AXLES_MAX, true, FUNCTION_WHEEL_SOLID, "Add a solid to a wheel")
	SORTIE_ARRAY2(WheelSolid, bool, isExternalized, stk::TDimNone, NB_AXLES_MAX, 2, "True if wheel solid is externalized, per wheel")
	SORTIE_ARRAY2(WheelSolid, double, wheelInertia, stk::TDimInertia, NB_AXLES_MAX, 2, "Wheel solid")
END_FONCTION()

BEGIN_FONCTION("Wheel dof", "DDL roue", Wheels, 4 * NB_AXLES_MAX * 2, true, FUNCTION_WHEELS, "Overide wheel DoF model")
	SORTIE_ARRAY2(Wheels, bool, isExternalized, stk::TDimNone, NB_AXLES_MAX, 2, "True if wheel DOf is externalized, per wheel")
	SORTIE_ARRAY2(Wheels, double, wheelAcceleration, stk::TDimAccelAngle, NB_AXLES_MAX, 2, "Wheel rotation acceleration")
	SORTIE_ARRAY2(Wheels, double, wheelSpeed, stk::TDimSpeedAngle, NB_AXLES_MAX, 2, "Wheel rotation speed")
	SORTIE_ARRAY2(Wheels, double, wheelRotation, stk::TDimAngle, NB_AXLES_MAX, 2, "Wheel rotation position")
END_FONCTION()

BEGIN_FONCTION("Motor Command", "Commande moteur", MotorCommand, 43, true, FUNCTION_MOTOR_COMMAND, "Control ignition, starter motor and butterfly position to override direct control by the driver\nuseful for hybrid vehicle applications")
SORTIE(MotorCommand, bool, iceIgnitionOn, stk::TDimNone, "ICE ignition on")
SORTIE(MotorCommand, bool, iceStarterMotor, stk::TDimNone, "activate ICE starter motor")
SORTIE(MotorCommand, double, iceThrottle, stk::TDimNone, "ICE throttle")
SORTIE_ARRAY2(MotorCommand, double, wheelElectricMotorCommand, stk::TDimNone, NB_AXLES_MAX, 2, "wheel electric motor command")
SORTIE_ARRAY(MotorCommand, double, differentialElectricMotorCommand, stk::TDimNone, 20, "differential electric motor command")
END_FONCTION()

BEGIN_FONCTION("Piloted Diff", "Diff Piloté", PilotedDiff, 40, true, FUNCTION_PILOTED_DIFF, "For each differential, a boolean informs Callas whether the differential uses default behaviour or is piloted\n"
"the indices of the differentials is defined in the \"transmission/distribution\" dialog\n"
"Piloting differentials only works on \"E-Free\" type differentials")
SORTIE_ARRAY(PilotedDiff, bool, isPilotedDiff, stk::TDimNone, 20, "Set this to true to control repartition of a differential")
SORTIE_ARRAY(PilotedDiff, double, diffRepartition, stk::TDimNone, 20, "If the differential is lengthwise, this is repartition to the FRONT, if lateral, this is to the LEFT. Value in the interval [0 1]")
END_FONCTION()
